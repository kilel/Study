<html><head>

<title></title>
<meta http-equiv="CONTENT-TYPE" content="text/html; charset=windows-1251">

<style>
</style>
<!--mstheme--><link rel="stylesheet" type="text/css" href="le9_files/poet1011-1251.htm"><meta name="Microsoft Theme" content="poetic 1011, default">
</head><body>

<p align="center">
<font size="4"><b>Урок 9. </b></font>

</p><p align="center">
<font size="4"><b><br> Анализ функций и полиномов.</b></font>
</p>


<p>
</p><ul>
  <li><a href="#1">Анализ функций  </a>
    </li><li><a href="#2">Поиск экстремумов функций </a>
    </li><li><a href="#3">Поиск минимумов и максимумов аналитических функций</a>
    </li><li><a href="#4">Анализ функций на непрерывность</a>
    </li><li><a href="#5">Определение точек нарушения непрерывности</a>
    </li><li><a href="#6">Нахождение сингулярных точек функции</a>
    </li><li><a href="#7">Вычисление асимптотических и иных разложений</a>
    </li><li><a href="#8">Пример анализа сложной функции  </a>
    </li><li><a href="#9">Функции из отдельных кусков</a>
    </li><li><a href="#10">Создание функций из отдельных кусков</a>
    </li><li><a href="#11">Простые примеры применения функции piecewise</a>
    </li><li><a href="#12">Работа с функциями piecewise </a>
    </li><li><a href="#13">Операции с полиномами</a>
    </li><li><a href="#14">Определение полиномов </a>
    </li><li><a href="#15">Выделение коэффициентов полиномов</a>
    </li><li><a href="#16">Оценка коэффициентов полинома по степеням</a>
    </li><li><a href="#17">Оценка степеней полинома</a>
    </li><li><a href="#18">Разложение полинома на множители</a>
    </li><li><a href="#19">Разложение полинома по степеням </a>
    </li><li><a href="#20">Вычисление корней полинома </a>
    </li><li><a href="#21">Основные операции с полиномами </a>
    </li><li><a href="#22">Операции над степенными многочленами с отрицательными степенями  </a>
    </li><li><a href="#23">Интерполяция и аппроксимация функциональных зависимостей . </a>
    </li><li><a href="#24">Интерполяция, экстраполяция и аппроксимация  </a>
    </li><li><a href="#25">Аппроксимация аналитически заданных функций</a>
    </li><li><a href="#26">Полиномиальная интерполяция табличных данных </a>
    </li><li><a href="#27">Сплайн-интерполяция и аппроксимация</a>
    </li><li><a href="#28">Прямое и обратное Z-преобразования </a>
    </li><li><a href="#29">Что нового мы узнали? </a>
      </li></ul>
	  
<a name="1"><font size="4">
Анализ функций</font>
</a><p></p>
<p>
<a name="1">&nbsp;
</a></p>
<p>
<a name="2"><font size="4">
Поиск экстремумов функций</font>
</a></p>
<p>
<a name="2">Важным разделом математики является исследование
аналитических функций. Оно обычно заключается в определении координат
особых точек функции и ее значений в этих точках, а также в выяснении
особенностей функции, таких как наличие точек разрыва, асимптот, точек
перегибов, разрывов и т. д. К сожалению, пока нет средств, сразу
выявляющих все особенности функций, поскольку даже средства, решающие
частные задачи анализа функций, довольно сложны и специфичны.
Достаточно отметить проблему поиска экстремумов функций (особенно
функций нескольких переменных). Поэтому функции приходится
анализировать индивидуально.
</a></p>
<p>
<a name="2">С помощью функции <font face="Courier New" size="2"> fsolve</font> легко находятся значения независимой
переменной<font face="Courier New" size="2"> х </font> функций вида
<font face="Courier New" size="2">f(x)</font>, при которых <font face="Courier New" size="2">f(x)=0&nbsp;</font>
(корни этого уравнения). При этом данная функция позволяет (в отличие от функции
<font face="Courier New" size="2">solve</font>) изолировать корни функции
<font face="Courier New" size="2">f(x)</font> указанием примерного
интервала их существования. Ряд функций служит для вычисления
экстремумов, максимумов и минимумов функций, а также для определения их
непрерывности. Одна из таких функций,
<font face="Courier New" size="2">extrema</font>, позволяет найти экстремумы выражения
<font face="Courier New" size="2">ехрr</font> (как максимумы, так и минимумы) при ограничениях
<font face="Courier New" size="2"> constcs</font> и переменных <font face="Courier New" size="2">vans</font>, по которым ищется экстремум:
<font face="Courier New" size="2"> extrema(expr. constrs) extrema(expr, constrs, vars) extrematexpr, constrs, vans,  V)</font>
</a></p>
<p>
<a name="2">Ограничения <font face="Courier New" size="2"> contrs</font> и переменные
<font face="Courier New" size="2"> vars</font> могут задаваться
одиночными объектами или списками ряда ограничений и переменных.
Найденные координаты точки экстремума присваиваются переменной
<font face="Courier New" size="2"> 's'.</font> При отсутствии
ограничений в виде равенств или неравенств вместо них записывается
пустой список {}. Эта функция в предшествующих версиях Maple находилась
в стандартной библиотеке и вызывалась командой<font face="Courier New" size="2">
readlib(extrema)</font>. Но в Maple 7 ее можно использовать без предварительного объявления. В этом убеждают приведенные ниже примеры:
</a></p>
<a name="2"><img src="le9_files/le9-1.jpg">
&nbsp;
</a><p>
<a name="2"><img src="le9_files/le9-2.jpg">
</a></p>
<p>
<a name="2">Как видно из приведенных примеров, функция <font face="Courier New" size="2">extrema</font> возвращает как значения экстремумов, так и значения аргументов, при которых экстремумы наблюдаются.
</a></p>
<p>
<a name="2">Для проверки оптимизационных алгоритмов существует ряд
тестовых функций. Одна из таких функций — функция двух переменных
Розенброка. В представленном ниже примере она задана как
<font face="Courier New" size="2"> rf(x.y):</font>
</a></p>
<a name="2"><img src="le9_files/le9-3.jpg">
</a><p>
<a name="2">Как нетрудно заметить, минимум этой функции при
значениях <font face="Courier New" size="2">х =у = 1,</font> равный О, функцией
<font face="Courier New" size="2">extrema</font> не обнаружен. Однако
это не недостаток данной функции, а просто неудачное ее применение.
Функция Розенброка имеет минимум значения, и для его обнаружения надо
использовать функцию
<font face="Courier New" size="2">minimize</font>, описанную ниже.
</a></p>
<p><a name="2"><font color="#008000">ПРИМЕЧАНИЕ</font>
</a></p>
<p><a name="2"><font color="#008000">&nbsp;Функция extrema дает
неплохие результаты при поиске экстремумов простых аналитических
функций, не имеющих особенностей. Однако при анализе сложных функций,
содержащих функции со сравнением аргумента (например, abs(x), signum(x)
и др.), функция extrema часто отказывается работать и просто повторяет
запись обращения к ней.</font>
</a></p>
<p><a name="2">&nbsp;
</a></p>
<p>
<a name="3"><font size="4">
Поиск минимумов и максимумов аналитических функций</font>
</a></p>
<p>
<a name="3">Часто нужно найти минимум или максимум заданной функции. Для поиска минимумов и максимумов выражений (функций)
<font face="Courier New" size="2">ехрr</font> служат функции стандартной библиотеки:
</a></p>
<blockquote>
<p>
<a name="3"><font color="#800000" face="Courier New" size="2">
minimizeCexpr, optl, opt2, .... optn)</font>
</a></p>
<p>
<a name="3"><font color="#800000" face="Courier New" size="2">&nbsp; maximize(expr, optl. opt2. .... optn)</font>
</a></p>
</blockquote>
<p>
<a name="3">Эти функции могут разыскивать максимумы и минимумы для функций как одной, так и нескольких переменных. С помощью опций<font face="Courier New" size="2">
optl, opt2,..., optn</font> можно указывать дополнительные данные для поиска. Например, параметр
`<font face="Courier New" size="2">infinity`</font> означает, что поиск минимума или максимума выполняется по всей числовой оси, а параметр
<font face="Courier New" size="2"> location</font> (или locatiorrtrue)
дает расширенный вывод результатов поиска — выдается не только значение
минимума (или максимума), но и значения переменных в этой точке.
</a></p>
<p>
<a name="3">Примеры применения функции <font face="Courier New" size="2"> minimize</font> приведены ниже:
</a></p>
<a name="3"><img src="le9_files/le9-4.jpg">
</a><p>
<a name="3">Приведем подобные примеры и для функции поиска максимума —
<font face="Courier New" size="2">maximize</font>:
</a></p>
<a name="3"><img src="le9_files/le9-5.jpg">
</a><p>
<a name="3">Обратите внимание на то, что в предпоследнем примере Maple 7 явно «оскандалилась» и вместо максимума функции
<font face="Courier New" size="2">sin(x)/x</font>, равного 1 при х=0,
выдал результат в виде бесконечности. Другими словами, система
обнаружила, что в данном случае ей незнакомо понятие предела
<font face="Courier New" size="2">sin(x)/x&nbsp; </font>при х—&gt;0. Эта ситуация кажется более чем странной, если учесть, что в этом примере Maple 6 давал правильный результат.
</a></p>
<p>
<a name="3">Применим функцию <font face="Courier New" size="2"> minimize</font> для поиска минимума функции Розенброка. Рисунок 9.1 показывает, что
<font face="Courier New" size="2"> minimize</font> прекрасно
справляется с данной задачей. На рис. 9.1 представлено также построение
функции Розенброка, хорошо иллюстрирующее ее особенности.
</a></p>
<a name="3"><img src="le9_files/le9-6.jpg">
</a><p>
<a name="3"><b>
Рис. 9.1</b>. Поиск минимума функции Розенброка и построение ее графика
</a></p>
<p>
<a name="3">Трудность поиска минимума функции Розенброка связана с ее
характерными особенностями. Из рис. 9.1 видно, что эта функция
представляет собой поверхность типа «глубокого оврага с почти плоским
дном», в котором и расположена точка минимума. Такая особенность этой
функции существенно затрудняет поиск минимума. То, что система Maple 7
справляется с данной тестовой функцией, вовсе не означает, что
трудности в поиске минимума или максимума других функций остаются
позади.
</a></p>
<p>
<a name="3">&nbsp;
</a></p>
<p>
<a name="4"><font size="4">
Анализ функций на непрерывность</font>
</a></p>
<p>
<a name="4">Для исследования функций на непрерывность Maple 7 имеет функцию
<font face="Courier New" size="2">iscont</font>, записываемую в ряде форм:
</a></p>
<blockquote>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
iscont(expr. х - а .. Ь)</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
iscont(expr. х = а .. b, 'closed')</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
iscontCexpr. х - а .. b, 'open')</font>
</a></p>
</blockquote>
<p>
<a name="4">Она позволяет исследовать выражение <font face="Courier New" size="2">ехрr</font>, заданное в виде зависимости от переменной х, на непрерывность. Если выражение непрерывно, возвращается логическое значение
<font face="Courier New" size="2">true</font>, иначе — <font face="Courier New" size="2">false</font>. Возможен также результат типа
<font face="Courier New" size="2">FAIL</font>. Параметр 'closed1 показывает, что конечные точки должны также проверяться, а указанный по умолчанию параметр
'<font face="Courier New" size="2">open</font>' — что они не должны проверяться.
</a></p>
<p>
<a name="4">Работу функции iscont иллюстрируют следующие примеры:&nbsp;
</a></p>
<blockquote>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2"> &gt; iscont(l/x^2,x=-l..l);</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
false</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
&gt; iscont(l/xA2.x=-l..l,'closed');</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
false</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
&gt; iscont(l/x,x-0..1);</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
true &gt; iscont(l/x,x=0..1.'closed');    ,</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
false ,--v &gt; iscont(l/(x+a).x=-l..l);</font>
</a></p>
<p>
<a name="4"><font color="#800000" face="Courier New" size="2">
FAIL</font>
</a></p>
</blockquote>
<p>
<a name="4">Рекомендуется внимательно присмотреться к результатам этих примеров и опробовать свои собственные примеры.
</a></p>
<p>
<a name="4">&nbsp;
</a></p>
<p>
<a name="5"><font size="4">
Определение точек нарушения непрерывности</font>
</a></p>
<p>
<a name="5">Функции, не имеющие непрерывности, доставляют много хлопот.
Поэтому важным представляется анализ функций на непрерывность. В Maple
7 функция
<font face="Courier New" size="2">discont(f,х)</font> позволяет определить точки, в которых нарушается непрерывность функции
<font face="Courier New" size="2">f(x)</font>. Она вычисляет все точки
в пределах изменениях от -? до +?. Результаты вычислений могут
содержать
особые экстра переменные с именами вида _Zn- и _NNn-. В частности, они
позволяют оценить периодические нарушения непрерывности функций.
</a></p>
<p>
<a name="5">Примеры применения функции <font face="Courier New" size="2"> discont</font> приведены ниже:
</a></p>
<blockquote>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2">
&gt; discont(l/(x-2).x);</font>
</a></p>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2">
{2}</font>
</a></p>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2">&nbsp;&gt; discont(l/((x-l)*(x-2)*(x-3)).x):</font>
</a></p>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2">
{1,2,3}&nbsp;</font>
</a></p>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2"> &gt; discont(GAMMA(x/2),x):</font>
</a></p>
<p>
<a name="5"><font color="#800000" face="Courier New" size="2">
{-2_NN1~}</font>
</a></p>
</blockquote>
<p>
<a name="5">Весьма рекомендуется наряду с применением данной функции просмотреть график анализируемой функции.
</a></p>
<p>
<a name="5"><font color="#008000">ПРИМЕЧАНИЕ&nbsp;</font>
</a></p>
<p>
<a name="5"><font color="#008000">&nbsp;В ряде примеров в выводе
используются специальные переменные вида
_NameN~, где Name — имя переменной иN— ее текущий номер. После
выполнения команды restart отсчет
N начинается с 1. Если вывод с такими переменными уже применялся, то их
текущие номера могут казаться произвольными. Специальные переменные
часто используются для упрощения выводимых выражений.</font>
</a></p>
<p>
<a name="5">&nbsp;
</a></p>
<p>
<a name="6"><font size="4">
Нахождение сингулярных точек функции</font>
</a></p>
<p>
<a name="6">Многие операции, такие как интегрирование и
дифференцирование, чувствительны к особенностям функций, в частности к
их разрывам и особым точкам. Функция
<font face="Courier New" size="2"> singular (ехрr,</font> <font face="Courier New" size="2"> vars)</font>
позволяет найти особые (сингулярные) точки выражения ехрг, в которых
она испытывает разрывы. Дополнительно в числе параметров может
указываться необязательный список переменных.
</a></p>
<p>
<a name="6">Примеры применения этой функции приведены ниже:
</a></p>
<a name="6"><img src="le9_files/le9-7.jpg">
</a><p><a name="6">&nbsp;</a></p>
<p>
<a name="7"><font size="4">
Вычисление асимптотических и иных разложений</font>
</a></p>
<p>
<a name="7">Важным достоинством системы Maple является наличие в ней
ряда функций, позволяющих выполнять детальный анализ функций. К такому
анализу относится вычисление асимптотических разложений функций,
которые представляются в виде рядов (не обязательно с целыми
показателями степени). Для этого используется следующая функция:
</a></p>
<blockquote>
<p>
<a name="7"><font color="#800000" face="Courier New" size="2">asympt(f.x)&nbsp;&nbsp;&nbsp;&nbsp;
asympt(f,x,n).</font>
</a></p>
</blockquote>
<p>
<a name="7">Здесь<font face="Courier New" size="2"> f </font> — функция переменной
<font face="Courier New" size="2"> х</font> или алгебраическое выражение;
<font face="Courier New" size="2"> х </font> — имя переменной, по которой производится разложение;<font face="Courier New" size="2">
n </font>— положительное целое число (порядок разложения, по умолчанию равный 6). Ниже представлены примеры применения этой функции:
</a></p>
<a name="7"><img src="le9_files/le9-8.jpg">
&nbsp;
</a><p>
<a name="7"><img src="le9_files/le9-9.jpg">
</a></p>
<p><a name="7">&nbsp;</a></p>
<p>
<a name="8"><font size="4">
Пример анализа сложной функции</font>
</a></p>
<p>
<a name="8">Ниже мы рассмотрим типичный анализ достаточно «сложной»
функции, имеющей в интересующем нас интервале изменения аргумента х от
-4 до 4, нули, максимумы и минимумы. Определение функции
<font face="Courier New" size="2">f(x)</font>, ее графики и график производной
<font face="Courier New" size="2">dF(x)/dx </font> даны на рис. 9.2. Этот рисунок является началом полного документа, описываемого далее, i
</a></p>
<p>
<a name="8">Функция <font face="Courier New" size="2">F(x)</font> на
первый взгляд имеет не совсем обычное поведение вблизи начала координат
(точки
с х =у = 0). Для выяснения такого поведения разумно построить график
функции при
малых х и у. Он также представлен на рис. 9.2 (нижний график) и
наглядно показывает, что экстремум вблизи точки (0, 0) является обычным
минимумом, немного смещенным вниз и влево от начала координат. Теперь
перейдем к анализу функции
<font face="Courier New" size="2">F(x)</font>. Для поиска нулей функции (точек пересечения
оси <font face="Courier New" size="2">х</font>)
удобно использовать функцию f sol ve, поскольку она позволяет задавать
область изменениях, внутри которой находится корень. Как видно из
приведенных ниже примеров, анализ корней<font face="Courier New" size="2">
F(x)</font> не вызвал никаких трудностей, и все корни были уточнены сразу: Поиск нулей функции&nbsp;
</a></p>
<blockquote>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt; fsolve(F(x),x,-2...-l):</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-1.462069476 &gt; fso1ve(F(x),x,-.01..0.01);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
0.&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt; fsolve(F(x).x.-.05..0);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-.02566109292&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt; fsolve(F(x),x,1..2);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
1.710986355&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt; fsolve(F(x),x,2.5..3):</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
2.714104921</font>
</a></p>
</blockquote>
<p>
<a name="8">Нетрудно заметить, что функция имеет два очень близких (но различных) корня прих, близких к нулю.
</a></p>
<p>
<a name="8">Анализ функции на непрерывность, наличие ее нарушений и сингулярных точек реализуется следующим образом:
</a></p>
<p>
<a name="8"><font face="Courier New" size="2">
Анализ функции на непрерывность, наличие ее нарушений и наличие сингулярных точек</font>
</a></p>
<a name="8"><img src="le9_files/le9-10.jpg">
&nbsp;
</a><p>
<a name="8"><img src="le9_files/le9-11.jpg">
</a></p>
<p>
<a name="8"><b>
Рис. 9.2.</b> Задание функции<font face="Courier New" size="2">
F(x) </font> и построение графиков функции и ее производной
</a></p>
<p>
<a name="8">Этот анализ не выявляет у заданной функции каких-либо
особенностей. Однако это не является поводом для благодушия — попытка
найти экстремумы<font face="Courier New" size="2">
F(x)</font> с помощью функции <font face="Courier New" size="2">extrema</font> и минимумы с помощью функции
<font face="Courier New" size="2"> minimize</font> завершаются полным крахом:
</a></p>
<p>
<a name="8">Неудачный поиск экстремумов и минимумов функции&nbsp;
</a></p>
<blockquote>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;extrema(F(x).{},x, 's');s;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">&gt;minimize(F(x),x=-.l...l);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
minimize (.05x + xe (-|x|)  * sm(2x),x = -.1 .. 1)</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
&gt;minimize(F(x),x=-2.5..:2);S</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
minimize (.05x + xe(-|x|)       sin(2*),*'=-2.5 ..-2)</font>
</a></p>
</blockquote>
<p>
<a name="8">Приходится признать, что в данном случае система Maple 7 ведет себя далеко не самым лучшим образом. Чтобы довести анализ
<font face="Courier New" size="2">F(x)</font> до конца, придется
вспомнить, что у функции без особенностей максимумы и минимумы
наблюдаются в точках, где производная меняет знак и проходит Через
нулевое значение. Таким образом, мы можем найти минимумы и максимумы по
критерию равенства производной нулю. В данном случае это приводит к
успеху:
</a></p>
<p>
<a name="8">Поиск минимумов по критерию равенства нулю производной
</a></p>
<blockquote>
<p>
<a name="8">&nbsp;<font color="#800000" face="Courier New" size="2">&gt; fso1ve(d1ff(F(x),x)=0,x,-.5...5);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-.01274428224&nbsp;</font>
</a></p>
<a name="8">  </a><p><a name="8"><font color="#800000" face="Courier New" size="2"> &gt;xm:=%;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
хт:= -.0003165288799&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;[F(xm),F(xnn-.001),F(xm-.001)]:</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
[-.00001562612637, .00003510718293, -.00006236451216]</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
&gt;fsolve(diff(F(x),x)-0.x,-2.5..-2);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-2.271212360 '&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;fso1ve(diff(F(x),x)=0,x.2..2.5):</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
2.175344371&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> Неудачный поиск максимума&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;maximize(F(x) ,x--l.. - .5);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
maximize(.05х + хе (-|x|) * sin(2x),x = -l .. -.5)&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> Поиск максимумов по критерию равенства нулю производной&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;fso1ve(diff(F(x).x),x,-l..-.5);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-.8094838517</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">&nbsp;&gt;fso1ve(diff(F(x),x),x..5..2):</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
.8602002115&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> &gt;fsolve(diff(F(x),x),x.-4..-3);</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
-3.629879137</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2">
&gt;fsolve(diff(F(x),x).x,3..4);&nbsp;</font>
</a></p>
<p>
<a name="8"><font color="#800000" face="Courier New" size="2"> 3.899664536</font>
</a></p>
</blockquote>
<p>
<a name="8">Итак, все основные особые точки данной функции (нули,
минимумы и максимумы) найдены, хотя и не без трудностей и не всегда с
применением специально предназначенных для такого поиска функций. В
уроке 12 будет описана процедура, которая автоматизирует процесс
анализа не очень сложных функций и обеспечивает его наглядную
визуализацию.
</a></p>
<p>
<a name="8">&nbsp;
</a></p>
<p>
<a name="9"><font size="4">
Функции из отдельных кусков</font>
</a></p>
<p>
<a name="9">&nbsp;
</a></p>
<p>
<a name="10"><font size="4">
Создание функций из отдельных кусков</font>
</a></p>
<p>
<a name="10">Для создания функций, составленных из отдельных кусков, Maple 7 располагает интересной функцией:
</a></p>
<blockquote>
<p>
<a name="10"><font color="#800000" face="Courier New" size="2">piecewise(cond_l,f_l. cond_2,f_2. .... cond_n,f_n. f_otherwise)</font>
</a></p>
</blockquote>
<p>
<a name="10">где <font face="Courier New" size="2"> f_i</font> — выражение, <font face="Courier New" size="2"> cond_i</font> — логическое выражение,
<font face="Courier New" size="2"> f_otherwise</font> — необязательное
дополнительное выражение. В зависимости от того или иного условия эта
функция позволяет формировать соответствующую аналитическую
зависимость. К кусочным функциям (подчас в скрытой форме) приводят
функции с элементами сравнения аргумента, например
<font face="Courier New" size="2"> abs, signum, max</font> и др. Поэтому в Maple 7 введен
достаточно мощный аппарат обработки и преобразований таких функций по частям.
</a></p>
<p>
<a name="10">&nbsp;
</a></p>
<p>
<a name="11"><font size="4">
Простые примеры применения функции piecewise</font>
</a></p>
<p>
<a name="11">Рисунок 9.3 показывает задание функции<font face="Courier New" size="2">
f(x)</font>, содержащей три характерных участка. По определенной через функцию пользователя зависимости
<font face="Courier New" size="2">f(x)</font> можно, как обычно, построить ее график.
</a></p>
<a name="11"><img src="le9_files/le9-12.jpg">
</a><p>
<a name="11"><b>
Рис. 9.3.</b> Пример задания и применения функции, составленной из отдельных кусков
</a></p>
<p>
<a name="11">Важно отметить, что созданная с помощью функции
<font face="Courier New" size="2"> piecewise</font> зависимость может
участвовать в различных преобразованиях. Например, на рис. 9.3
показано, что она легко дифференцируется и можно построить график
производной этой функции. При этом каждая часть функции обрабатывается
отдельно.
</a></p>
<p>
<a name="11">&nbsp;
</a></p>
<p>
<a name="12"><font size="4">
Работа с функциями piecewise</font>
</a></p>
<p>
<a name="12">С функциями типа <font face="Courier New" size="2"> piecewise</font>
можно работать, как с обычными функциями. При этом необходимые операции
и преобразования осуществляются для каждой из частей функции и
возвращаются в наглядной форме.
</a></p>
<p>
<a name="12">Ниже приведен пример задания функции <font face="Courier New" size="2"> f</font> в аналитической форме:
</a></p>
<a name="12"><img src="le9_files/le9-13.jpg">
</a><p>
<a name="12">Для выявления характера функции воспользуемся функцией
<font face="Courier New" size="2"> convert</font> и создадим объект g в виде кусочной функции:
</a></p>
<a name="12"><img src="le9_files/le9-14.jpg">
</a><p>
<a name="12">Выполним дифференцирование и интегрирование функции:
</a></p>
<a name="12"><img src="le9_files/le9-15.jpg">
</a><p>
<a name="12">Как нетрудно заметить, результаты получены также в виде
кусочных функций. Можно продолжить работу с функцией f и выполнить ее
разложение в степенной ряд:&nbsp;
</a></p>
<blockquote>
<p>
<a name="12"><font color="#800000" face="Courier New" size="2"> &gt; series(f,   х);</font>
</a></p>
<a name="12">  </a><p><a name="12"><font color="#800000" face="Courier New" size="2">
-1+.Х + О(x<sup>6</sup>)</font>
</a></p>
</blockquote>
<p>
<a name="12">Чтобы убрать член с остаточной погрешностью, можно выполнить эту операцию следующим образом:
</a></p>
<blockquote>
<p>
<a name="12"><font color="#800000" face="Courier New" size="2">&gt; series(g,  x);</font>
</a></p>
<a name="12">  </a><p><a name="12"><font color="#800000" face="Courier New" size="2">-1 + х</font>
</a></p>
</blockquote>
<p>
<a name="12">Обратите внимание на то, что поскольку разложение в ряд
ищется (по умолчанию) в окрестности точки х=0, то при этом используется
тот кусок функции,
в котором расположена эта точка. Читатель может продолжить работу с
кусочными функциями и далее.
</a></p>
<p>
<a name="12">&nbsp;
</a></p>
<p>
<a name="13"><font size="4">
Операции с полиномами</font>
</a></p>
<p>
<a name="13">&nbsp;
</a></p>
<p>
<a name="14"><font size="4">
Определение полиномов</font>
</a></p>
<p>
<a name="14">К числу наиболее известных и изученных аналитических
функций относятся степенные многочлены — полиномы. Графики полиномов
описывают огромное разнообразие кривых на плоскости. Кроме того,
возможны рациональные полиномиальные выражения в виде отношения
полиномов. Таким образом, круг объектов, которые могут быть
представлены полиномами, достаточно обширен, и полиномиальные
преобразования широко используются на практике, в частности, для
приближенного представления других функций.
</a></p>
<p>
<a name="14">Под полиномом в системе Maple 7 понимается сумма выражений
с целыми степенями. Многочлен для ряда переменных —многомерный полином.
К одномерным полиномам относятся степенной многочлен:
</a></p>
<a name="14"><img src="le9_files/le9-16.jpg">
</a><p>
<a name="14">а также отдельная переменная х и константа. Большое
достоинство полиномов состоит в том, что они дают единообразное
представление многих зависимостей и для своего вычисления требуют
только арифметических операций (их число значительно сокращается при
использовании хорошо известной схемы Горнера). Производные от полиномов
и интегралы с подынтегральными функциями-полиномами легко вычисляются и
имеют простой вид. Есть и достаточно простые алгоритмы для вычисления
всех (в том числе комплексных) корней полиномов на заданном промежутке.
</a></p>
<p>
<a name="14">&nbsp;
</a></p>
<p>
<a name="15"><font size="4">
Выделение коэффициентов полиномов</font>
</a></p>
<p>
<a name="15">Для выделения коэффициентов полиномов в Maple 7 служат следующие функции:
</a></p>
<ul>
<a name="15">  </a><li><a name="15">&nbsp;<font face="Courier New" size="2"> coeff(p,  х</font><font face="Courier New" size="2">)
    </font> — возвращает коэффициент при х полинома р;&nbsp;</a></li>
<a name="15">  </a><li><a name="15"><font face="Courier New" size="2">&nbsp;coeff(p.x.n)</font> — возвращает коэффициент для члена со степенью
    n полинома р;</a></li>
<a name="15">  </a><li><a name="15">&nbsp; <font face="Courier New" size="2">coeff(p.x^n)</font> — возвращает коэффициенты при
    х^n полинома р;</a></li>
<a name="15">  </a><li><a name="15"><font face="Courier New" size="2">&nbsp;coeffs(p, х, 't')</font>
— возвращает коэффициенты полинома нескольких переменных, относящиеся к
переменной х (или списку переменных) с опцией ' t', задающей имя
переменной;</a></li>
<a name="15">  </a><li><a name="15"><font face="Courier New" size="2">&nbsp;collect(p,x)</font> — возвращает полином, объединяя коэффициенты при степенях переменной х.</a></li>
</ul>
<p>
<a name="15">Ниже даны примеры применения этих функций:
</a></p>
<a name="15"><img src="le9_files/le9-17.jpg">
&nbsp;
</a><p>
<a name="15"><img src="le9_files/le9-18.jpg">
</a></p>
<p><a name="15"><font color="#008000">&nbsp;ПРИМЕЧАНИЕ&nbsp;</font>
</a></p>
<p><a name="15"><font color="#008000">      Следует обратить внимание на то, что при выполнении операции collect в прежних версиях
Maple довольно часто возникала фатальная ошибка. Как видно из приведенных примеров, в Maple 7 такой ошибки уже не возникает.</font>
</a></p>
<p><a name="15">&nbsp;
</a></p>
<p>
<a name="16"><font size="4">
Оценка коэффициентов полинома по степеням</font>
</a></p>
<p>
<a name="16">Полином может быть неполным, то есть не содержать членов со степенями ниже некоторой. Функция
<font face="Courier New" size="2">lcoeff</font> возвращает старший, а функция
<font face="Courier New" size="2"> tcoeff</font> — младший коэффициент полинома нескольких переменных. Эти функции задаются в виде:
</a></p>
<blockquote>
<p>
<a name="16"><font color="#800000" face="Courier New" size="2">lcoeff(p)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tcoeff(p)</font>
</a></p>
<p>
<a name="16"><font color="#800000" face="Courier New" size="2">Icoeff(p. x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tcoeff(p, x)</font>
</a></p>
<p>
<a name="16"><font color="#800000" face="Courier New" size="2">Icoeff(p. x. 't')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tcoeff(p, x. 't')</font>
</a></p>
</blockquote>
<p>
<a name="16">Функции <font face="Courier New" size="2"> Icoeff</font> и <font face="Courier New" size="2"> tcoef</font>
f возвращают старший (младший) коэффициент полинома р относительно
переменной х или ряда переменных при многомерном полиноме. Если х не
определено,
<font face="Courier New" size="2"> Icoeff (tcoeff)</font> вычисляет
старший (младший) коэффициент относительно всех переменных полинома р.
Если третий аргумент t определен, то это имя назначено старшему
(младшему) члену р. Если х — единственное неизвестное и d — степень р
по х, то
<font face="Courier New" size="2">lcoeff(p, x)</font> эквивалентно coef f (p. x, d). Если х — список или множество неизвестных,
<font face="Courier New" size="2">lcoeff (tcoef f)</font> вычисляет
старший (младший) коэффициент р, причем р рассматривается как полином
многих переменных. Имейте в виду, что р должен быть разложен по
степеням неизвестного х до вызова функций
<font face="Courier New" size="2">lcoeff</font> или <font face="Courier New" size="2"> tcoef</font> f.
</a></p>
<p>
<a name="16">Приведем примеры применения функций <font face="Courier New" size="2">lcoeff, tcoef f и coeffs:</font>
</a></p>
<a name="16"><img src="le9_files/le9-19.jpg">
</a><p><a name="16">&nbsp;</a></p>
<p>
<a name="17"><font size="4">
Оценка степеней полинома</font>
</a></p>
<p>
<a name="17">Функция <font face="Courier New" size="2"> degree</font> возвращает высшую степень полинома, а&nbsp;
<font face="Courier New" size="2">ldegree</font> — низшую степень. Эти функции задаются следующим образом:&nbsp;
</a></p>
<blockquote>
<p>
<a name="17"><font color="#800000" face="Courier New" size="2">degree(a.x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ldegree(a.x)</font>
</a></p>
</blockquote>
<p>
<a name="17">Функции <font face="Courier New" size="2"> degree</font> и <font face="Courier New" size="2">ldegree</font>
используются, чтобы определить высшую и низшую степени полинома от
неизвестного (неизвестных) х, которое чаще всего является единственным,
но может быть списком или множеством неизвестных. Полином может иметь
отрицательные целые показатели степеней при х. Таким образом,
<font face="Courier New" size="2"> degree</font> и <font face="Courier New" size="2">ldegree</font>
могут возвратить отрицательное или положительное целое число. Если
выражение не является полиномом от х данным параметром, то возвращается
<font face="Courier New" size="2">FAIL</font>.
</a></p>
<p>
<a name="17">Чтобы <font face="Courier New" size="2"> degree</font> и&nbsp; <font face="Courier New" size="2">ldegree</font> возвратили точный результат, полином обязательно должен быть сгруппирован по степеням х. Например, для выражения
(х + 1) (х+ 2) - х<sup>2 </sup>функция <font face="Courier New" size="2"> degree</font> не обнаружит аннулирование старшего члена и неправильно возвратит результат 2. Во избежание этой проблемы перед вызовом
<font face="Courier New" size="2"> degree</font> следует применять к полиному функции
<font face="Courier New" size="2"> collect</font> или <font face="Courier New" size="2">expand</font>. Если х — множество неизвестных,
<font face="Courier New" size="2">degree/ ldegree </font> вычисляет полную степень. Если х — список неизвестных,
<font face="Courier New" size="2">degree/ldegree </font> вычисляет векторную степень. Векторная степень определяется следующим образом:
</a></p>
<blockquote>
<p>
<a name="17"><font color="#800000" face="Courier New" size="2">
degree(p.[]) =0</font>
</a></p>
<p>
<a name="17"><font color="#800000" face="Courier New" size="2">
degree(p.[xl.x2,...]) =degree(p.xl) degree(lcoeff(p.xl),[x2....])</font>
</a></p>
</blockquote>
<p>
<a name="17">Полная степень тогда определяется следующим образом:
</a></p>
<blockquote>
<p>
<a name="17"><font color="#800000" face="Courier New" size="2">
degree(p.{xl....,xn}) - maximum degree(p.{xl....xn})</font>
</a></p>
</blockquote>
<p>
<a name="17">или
</a></p>
<blockquote>
<p>
<a name="17"><font color="#800000" face="Courier New" size="2">
degree(p,{xl....,xn}) = degree(p.[xl,....xn])</font>
</a></p>
</blockquote>
<p>
<a name="17">Обращаем внимание на то, что векторная степень зависит от порядка перечисления неизвестных, а полная степень не зависит.
</a></p>
<p>
<a name="17">Примеры применения функций <font face="Courier New" size="2"> degree</font> и
<font face="Courier New" size="2">ldegree</font>:
</a></p>
<a name="17"><img src="le9_files/le9-20.jpg">
</a><p><a name="17">&nbsp;</a></p>
<p>
<a name="18"><font size="4">
Разложение полинома на множители</font>
</a></p>
<p>
<a name="18">Для контроля того, имеет ли полином несокращаемые множители, может использоваться функция
<font face="Courier New" size="2"> irredik(p)</font> и ее вариант в инертной форме
<font face="Courier New" size="2"> Ireduc(p.K),</font> где К — <font face="Courier New" size="2">RootOf</font>-выражение. Ниже приведены примеры применения этих тестовых функций:
</a></p>
<a name="18"><img src="le9_files/le9-21.jpg">
</a><p><a name="18">&nbsp;</a></p>
<p>
<a name="19"><font size="4">
Разложение полинома по степеням</font>
</a></p>
<p>
<a name="19">Для разложения полинома <font face="Courier New" size="2"> р</font> по степеням служат инертные функции
<font face="Courier New" size="2"> AFactor(р)</font> и <font face="Courier New" size="2">AFactors(p)</font>. Полином может быть представлен в виде зависимости от одной или
нескольких переменных.
</a></p>
<p>
<a name="19">Функция Afactor(p) выполняет полную факторизацию (разложение) полинома р от
нескольких переменных с коэффициентами в виде алгебраических чисел над полем
комплексных чисел. При этом справедливо отношение
<font face="Courier New" size="2"> evala(AFactor(p) )=factor(p,complex).</font>
Таким образом, эта функция является, по существу, избыточной.
</a></p>
<p>
<a name="19">В случае одномерного полинома полное разложение на множители является
разложением на линейные множители. Функция <font face="Courier New" size="2"> AFactors</font> аналогична функции
Afactor, но создает структуру данных формы <font face="Courier New" size="2"> [u,[[f[l],e[l]],....[f[n],e[n]]]]</font> так,
что <font face="Courier New" size="2"> p=u*f[l]xe[l]*...*f[n]^e[n],</font> где каждый<font face="Courier New" size="2">
f[i]</font> — неприводимый полином.
</a></p>
<p>
<a name="19">Ниже даны примеры применения функции <font face="Courier New" size="2">Afactor</font>:
</a></p>
<a name="19"><img src="le9_files/le9-22.jpg">
</a><p>
<a name="19">Нетрудно заметить, что разложение полинома на множители
позволяет оценить наличие у него корней. Однако для этого удобнее
воспользоваться специальными функциями, рассмотренными ниже.
</a></p>
<p>
<a name="19">&nbsp;
</a></p>
<p>
<a name="20"><font size="4">
Вычисление корней полинома</font>
</a></p>
<p>
<a name="20">Для вычисления действительных и комплексных корней полиномов служит уже известная нам функция<font face="Courier New" size="2">
solve(p.x)</font>, возвращающая список корней полинома
<font face="Courier New" size="2"> р</font> одной переменной. Кроме того, имеются следующие функции для вычисления корней полиномов:
</a></p>
<blockquote>
<p>
<a name="20"><font color="#800000" face="Courier New" size="2">
roots(p) ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
roots(p. К)               ,&nbsp;</font>
</a></p>
<p>
<a name="20"><font color="#800000" face="Courier New" size="2">roots(p. x),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
roots(p. x. К)</font>
</a></p>
</blockquote>
<p>
<a name="20">Эти функции вычисляют точные корни в рациональной или алгебраической области чисел. Корни возвращаются в виде<font face="Courier New" size="2"> [ [rl.ml], .... [rn.mn]
]</font>, где <font face="Courier New" size="2"> ri</font> — это
</a></p>
<p>
<a name="20">корень полинома, a <font face="Courier New" size="2"> mi</font> — порядковый номер полинома. С действиями этих функций можно разобраться с помощью приведенных ниже примеров:
</a></p>
<a name="20"><img src="le9_files/le9-23.jpg">
</a><p><a name="20">&nbsp;</a></p>
<p>
<a name="21"><font size="4">
Основные операции с полиномами</font>
</a></p>
<p>
<a name="21">С полиномами могут выполняться различные операции. Прежде всего отметим некоторые функции, которые относятся к одному полиному:
</a></p>
<ul>
<a name="21">  </a><li><a name="21">&nbsp;<font face="Courier New" size="2">psqrt(p)</font> — возвращает квадрат полинома;</a></li>
<a name="21">  </a><li><a name="21">&nbsp;<font face="Courier New" size="2">proot(p.n)</font> — возвращает
    n -ю степень полинома;</a></li>
<a name="21">  </a><li><a name="21">&nbsp;<font face="Courier New" size="2">realroot(p)</font> — возвращает интервал, в котором находятся действительные корни полинома;</a></li>
<a name="21">  </a><li><a name="21"><font face="Courier New" size="2">&nbsp;randpolyCvars, eqns)</font> — возвращает случайный полином по переменным
    <font face="Courier New" size="2"> vans</font> (список) с максимальной степенью
    <font face="Courier New" size="2">eqns</font>;</a></li>
<a name="21">  </a><li><a name="21">&nbsp;<font face="Courier New" size="2">discrim(p,var)</font> — вычисление дискриминанта полинома по переменной
    <font face="Courier New" size="2">var</font>;</a></li>
<a name="21">  </a><li><a name="21">&nbsp;<font face="Courier New" size="2">Primitive(a) mod p</font> — проверка полинома на примитивность (возвращает
    <font face="Courier New" size="2">true</font>, если полином примитивен).</a></li>
</ul>
<p>
<a name="21">Действие этих функций достаточно очевидно, поэтому ограничимся приведением примеров их использования:
</a></p>
<a name="21"><img src="le9_files/le9-24.jpg">
&nbsp;
</a><p>
<a name="21"><img src="le9_files/le9-25.jpg">
</a></p>
<p>
<a name="21">Обратите внимание на то, что для использования некоторых
из приведенных функций необходим вызов их из стандартной библиотеки.
Для функции
<font face="Courier New" size="2"> randpoly</font> приведенные результаты случайны, так что, скорее всего, их повторение невозможно.
</a></p>
<p>
<a name="21">С полиномами можно выполнять обычные операции, используя для этого соответствующие операторы:
</a></p>
<a name="21"><img src="le9_files/le9-26.jpg">
</a><p>
<a name="21">В целом надо отметить, что аппарат действий с полиномами в
Maple 7 хорошо развит и позволяет выполнять с ними практически любые
математические операции. В частности, можно вычислять производные от
полиномов и интегралы, у которых полиномы являются подынтегральными
функциями:
</a></p>
<a name="21"><img src="le9_files/le9-27.jpg">
&nbsp;
</a><p>
<a name="21"><img src="le9_files/le9-28.jpg">
</a></p>
<p><a name="21">&nbsp;</a></p>
<p>
<a name="22"><font size="4">
Операции над степенными многочленами с отрицательными степенями</font>
</a></p>
<p>
<a name="22">Хотя в подавляющем большинстве случаев используются
степенные многочлены (полиномы) с положительными степенями, Maple 7 не
накладывает особых ограничений и на многочлены с отрицательными
степенями. Например, можно задать такой степенной многочлен:
</a></p>
<a name="22"><img src="le9_files/le9-29.jpg">
</a><p>
<a name="22">Нетрудно показать, что с ним можно выполнять различные операции:
</a></p>
<a name="22"><img src="le9_files/le9-30.jpg">
</a><p><a name="22"><font color="#008000">ПРИМЕЧАНИЕ</font>
</a></p>
<p><a name="22"><font color="#008000">&nbsp;Maple 7 не накладывает
ограничений на применение степенных многочленов (полиномов) с
отрицательными степенями. Однако свойства таких полиномов заметно
отличаются от свойств полиномов с положительными степенями, поэтому при
применении первых надо проявлять известную осторожность</font>.
</a></p>
<p><a name="22">&nbsp;
</a></p>
<p>
<a name="23"><font size="4">
Интерполяция и аппроксимация функциональных зависимостей</font>
</a></p>
<p>
<a name="23">&nbsp;
</a></p>
<p>
<a name="24"><font size="4">
Интерполяция, экстраполяция и аппроксимация</font>
</a></p>
<p>
<a name="24">Вычисление многих функций, особенно специальных, требует
больших затрат времени. Поэтому до сих пор широко применяются таблицы
таких функций. Достаточно отметить знаменитые на весь мир таблицы в
книге «Справочник по специальным функциям с формулами, графиками и
таблицами» под редакцией М. Абрамовица и И. Стиган [59].
</a></p>
<p>
<a name="24">Если некоторая зависимость<font face="Courier New" size="2">
у(х)</font> представлена рядом табличных отсчетов
<font face="Courier New" size="2">y(x),</font> то интерполяцией принято называть вычисление
значений<font face="Courier New" size="2"> у(х)</font> при
заданном <font face="Courier New" size="2">х,</font> расположенном в интервале между отсчетами. За пределами общего интервала определения функции
<font face="Courier New" size="2"> [а,b]</font>, то есть при х &lt; а
и х &gt; b, вычисление у(х) называют
экстраполяцией (или иногда предсказанием значений функции). В данном
случае речь идет об одномерной интерполяции, но возможны двумерная
интерполяция функций двух переменных
<font face="Courier New" size="2">z(x, у)</font> и даже многомерная интерполяция для функций многих переменных.
</a></p>
<p>
<a name="24">Интерполяция и экстраполяция часто выполняются по
некоторой скрытой, но подразумеваемой зависимости. Например, если
узловые точки функции соединить отрезками прямых, то будем иметь
многоинтервальную линейную интерполяцию •данных. Если использовать
отрезки параболы, то интерполяция будет параболической. Особое значение
имеет многоинтервальная сплайн-интерполяция, области применения которой
уже сейчас весьма обширны и непрерывно расширяются. Интерполяция рядом
Фурье (набором синусоидальных функций) также достаточно хорошо
известна; она эффективна при интерполяции периодических функций.
</a></p>
<p>
<a name="24">Аппроксимацией в системах компьютерной математики обычно
называют получение приближенных значений какого-либо выражения. Однако
под аппроксимацией функций подразумевается получение некоторой
конкретной функции, вычисленные значения которой с некоторой точностью
аналогичны аппроксимируемой зависимости. Обычно предпочитают найти одну
зависимость, приближающую заданный ряд узловых точек. Часто для этого
используют степенные многочлены — полиномы.
</a></p>
<p>
<a name="24">Здесь мы будем рассматривать такие виды аппроксимации, которые дают точные значения
функции <font face="Courier New" size="2">у(х)</font>
в узловых точках в пределах погрешности вычислений по умолчанию. Если
аппроксимирующая зависимость выбирается из условия наименьшей
среднеквадратической погрешности в узловых точках (метод наименьших
квадратов), то мы
имеем регрессию или приближение функций по методу наименьших квадратов.
</a></p>
<p>
<a name="24">&nbsp;
</a></p>
<p>
<a name="25"><font size="4">
Аппроксимация аналитически заданных функций</font>
</a></p>
<p>
<a name="25">Если функция задана аналитически, то наиболее простым
способом нахождения ее аппроксимирующей зависимости является применение
функции
<font face="Courier New" size="2">convert</font>. Это поясняют следующие примеры:
</a></p>
<a name="25"><img src="le9_files/le9-31.jpg">
</a><p>
<a name="25">На рис. 9.4 представлен пример полиномиальной аппроксимации хорошо известной статистической функции
<font face="Courier New" size="2">erfc(x)</font>. Для полинома задана
максимальная степень 12, но ввиду отсутствия в разложении четных
степеней максимальная степень результата оказывается равна 11.
</a></p>
<a name="25"><img src="le9_files/le9-32.jpg">
</a><p>
<a name="25"><b>
Рис. 9.4. </b> Пример полиномиальной аппроксимации функции<font face="Courier New" size="2">
erfc(x)</font>
</a></p>
<p>
<a name="25">Как видно из приведенного рисунка, в интервале изменениях
от -1,5 до 1,5 аппроксимирующее выражение почти повторяет исходную
зависимость. Однако затем график аппроксимирующей функции быстро
отходит от графика исходной зависимости. При этом он ведет себя иначе
даже качественно, никоим образом не показывая асимптотическое
поведение, характерное для исходной зависимости.
</a></p>
<p>
<a name="25">&nbsp;
</a></p>
<p>
<a name="26"><font size="4">
Полиномиальная интерполяция табличных данных</font>
</a></p>
<p>
<a name="26">Если данные некоторой зависимости <font face="Courier New" size="2">у(х)</font> заданы векторами
<font face="Courier New" size="2"> X</font> и <font face="Courier New" size="2"> Y</font> ее дискретных значений, то для получения интерполяционного степенного многочлена достаточно записать многочлен для всех
<font face="Courier New" size="2">N</font> пар значений<font face="Courier New" size="2">
y<sub>i</sub>(x<sub>i</sub>)</font> при i=1...N (или<font face="Courier New" size="2">
i =0...N- 1</font>,
если индексы отсчетов начинаются с нуля). Полученная при этом система
линейных (относительно коэффициентов полинома) уравнений после решения
дает коэффициенты аппроксимирующего полинома. Степень полинома на 1
меньше
N, а вычисляемые при х значения&nbsp; <font face="Courier New" size="2">у(х)</font> совпадают с табличными (узловыми) в пределах вычислительной погрешности.
</a></p>
<p>
<a name="26">На самом деле все это делать не нужно, поскольку Maple 7 имеет реализующую данный алгоритм встроенную функцию<font face="Courier New" size="2">
interp(X,Y,v)</font> или в инертной форме <font face="Courier New" size="2">Interp(X,Y,v)</font>.
</a></p>
<p>
<a name="26">Переменная<font face="Courier New" size="2"> v</font> указывает имя переменной интерполяционного полинома. Векторы X и Y должны
содержать<font face="Courier New" size="2"> n + 1 =N</font> координат точек исходной зависимости, где и — степень интерполирующего полинома.
</a></p>
<p>
<a name="26">Рисунок 9.5 показывает технику применения полиномиальной аппроксимации на основе функции
<font face="Courier New" size="2"> interp</font> с построением графика
исходных точек и аппроксимирующего полинома. Нетрудно заметить, что
график полинома проходит точно через исходные точки — они показаны
квадратиками.
</a></p>
<p>
<a name="26">В этом примере полезно присмотреться к визуализации
результатов вычислений и совместному построению графика
интерполирующего полинома и исходных точек. В частности, для построения
последних использована обычная функция plot, позволяющая выводить на
график точки с заданными координатами, причем не только в виде
окружностей, но и в виде точек, маленьких крестиков, кружков, квадратов
и других фигур. Для выбора типа точек и других параметров графика его
надо выделить (установив указатель мыши в поле графика и щелкнув левой
кнопкой) и нажать правую кнопку мыши — появится контекстно-зависимое
меню с операциями форматирования графика. Это меню показано на рис.
9.5.
</a></p>
<p>
<a name="26">Приведем еще несколько примеров использования функции Interp:
</a></p>
<a name="26"><img src="le9_files/le9-33.jpg">
&nbsp;
</a><p>
<a name="26"><img src="le9_files/le9-34.jpg">
</a></p>
<p>
<a name="26"><b>
Рис. 9.5</b>. Пример осуществления полиномиальной аппроксимации
</a></p>
<p>
<a name="26">&nbsp;
</a></p>
<p>
<a name="27"><font size="4">
Сплайн-интерполяция и аппроксимация</font>
</a></p>
<p>
<a name="27">Точность полиномиальной аппроксимации катастрофически
падает при увеличении степени аппроксимирующих полиномов. От этого
недостатка можно избавиться, используя для
аппроксимации отрезки полиномов невысокой степени, применяемые для
представления части узловых точек. Самым известным методом такой
аппроксимации
является сплайн-аппроксимация на основе применения отрезков кубических
полиномов. При этом аппарат сплайн-
аппроксимации позволяет получить полиномы, которые дают в узловых
точках непрерывность не только представляемой ими функции, но и ее
первых и даже вторых производных.
</a></p>
<p>
<a name="27">Наглядно сплайн-функцию можно представить в виде гибкой
стальной линейки, закрепленной в узловых точках и плавно изгибающейся.
Благодаря указанным свойствам сплайнов они неплохо описывают функции,
представленные как небольшим числом узловых точек (благодаря плавности
сплайн-
кривых), так и функции, представляемые очень большим числом узловых
точек (поскольку порядок полиномов от этого числа уже не зависит).
Недостатком сплайн-
аппроксимации является отсутствие общего выражения для всей кривой.
Фактически приходится использовать набор сплайн-
функций для различных интервалов между узловыми точками.
</a></p>
<p>
<a name="27">Для получения сплайн- интерполяций используется Maple-функция
<font face="Courier New" size="2"> spline (X, Y, var, d).</font>
</a></p>
<p>
<a name="27">Здесь <font face="Courier New" size="2"> X и Y</font> —
одномерные векторы одинакового размера, несущие значения координат
узловых точек исходной функции (причем в произвольном порядке),
<font face="Courier New" size="2"> var</font> — имя переменной,
относительно которой вычисляется сплайн-функция, наконец,
необязательный параметр d задает вид сплайна. Он может иметь следующие
значения:
<font face="Courier New" size="2"> 1inear</font> — линейная функция, или полином первого порядка,
<font face="Courier New" size="2"> quadratic</font> — квадратичная функция, или полином второго порядка,
<font face="Courier New" size="2"> cubic</font> — полином третьего порядка,
<font face="Courier New" size="2"> quartiс</font> — полином четвертого
порядка. Если параметр d опущен, то сплайн-функция будет строиться на
основе полиномов третьего порядка (кубические сплайны).
</a></p>
<p>
<a name="27">Технику сплайновой аппроксимации наглядно поясняет рис.
9.6. На нем представлено задание векторов узловых точек X и Y и четырех
сплайновых функций, по которым построены их графики. Для одной из
функций (с линейной интерполяцией между узлами) показан вид сплайновой
функции.
</a></p>
<a name="27"><img src="le9_files/le9-35.jpg">
</a><p>
<a name="27"><b>
Рис. 9.6.</b> Задание сплайновой аппроксимации и построение графиков полученных функций
</a></p>
<p>
<a name="27">Как видно из рис. 9.6, сплайновая функция представляет
собой кусочную функцию, определяемую на каждом отдельном интервале. При
этом на каждом участке такая функция описывается отдельным полиномом
соответствующей степени. Функция
<font face="Courier New" size="2"> plot</font> «понимает» такие функции и позволяет без преобразования типов данных&nbsp;
строить их графики. Для работы с кусочными функциями можно использовать функции
<font face="Courier New" size="2"> convert</font> и <font face="Courier New" size="2">piecewise</font>.
</a></p>
<p><a name="27">&nbsp;
</a></p>
<p>
<a name="28"><font size="4">
Прямое и обратное Z-преобразования</font>
</a></p>
<p>
<a name="28">Прямое и обратное Z-преобразования функций широко
используются при решении задач автоматического управления. Эти
преобразования задаются следующими функциями:
</a></p>
<ul>
<a name="28">  </a><li><a name="28"><font face="Courier New" size="2">&nbsp;ztrans(f, n, z)</font> — прямое преобразование функции
    f(n) в f(z);</a></li>
<a name="28">  </a><li><a name="28">&nbsp; invztransCf, z, n) — обратное преобразование
    f(z) в f(n).</a></li>
</ul>
<p>
<a name="28">Заметим, что прямое Z-преобразование базируется на соотношении<font face="Courier New" size="2">
ztrans(f (n) ,n,z)= = sum(f(n)/z~n,n=0. .infinity),</font>
записанном на Maple-языке. В первых версиях системы Maple
Z-преобразования выполнялись средствами библиотеки и требовали вызова
командой
<font face="Courier New" size="2">readlib(ztrans)</font>. Но в Maple 7 они включены в
ядро системы и предварительного вызова уже не требуют. В этом убеждают следующие примеры:
</a></p>
<a name="28"><img src="le9_files/le9-36.jpg">
</a><p>
<a name="28">Родственные Z-преобразованиям интегральные преобразования Лапласа и Фурье реализуются с помощью пакета
<font face="Courier New" size="2"> inttrans</font> (интегральные преобразования).
</a></p>
<p>
<a name="28">&nbsp;
</a></p>
<p>
<a name="29"><font size="4">
Что нового мы узнали?</font>
</a></p>
<p>
<a name="29">В этом уроке мы научились:
</a></p>
<p>
<a name="29">&nbsp;Выполнять поиск экстремумов функций.
</a></p>
<ul>
<a name="29">  </a><li><a name="29">&nbsp;Осуществлять поиск минимумов и максимумов аналитических функций.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Анализировать функции 'на непрерывность.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Находить сингулярные точки функций.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Вычислять асимптотические и иные разложения.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Анализировать сложные функции.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Работать с кусочными функциями.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Выполнять операции с полиномами.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Интерполировать и аппроксимировать функциональные зависимости.</a></li>
<a name="29">  </a><li><a name="29">&nbsp;Вычислять прямые и обратные Z-преобразования.</a></li>
</ul>
<!-- ><!-- "><!-- '><!-- -->


<style>
#bn {display:block;}
#bt {display:block;}
</style>
<div style="background: transparent url(http://www.tns-counter.ru/V13a****yandex_ru/ru/CP1251/tmsec=narod_total/) repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;"></div>
<script language="JavaScript" src="le9_files/163.htm"></script><div style="position: absolute; left: 0pt; visibility: hidden;" id="ch"><spacer type="block" height="1" width="1"></div><div style="position: absolute; left: 1149px; top: 0pt; visibility: hidden; z-index: 999;" id="bn"><table border="0" cellpadding="1" cellspacing="0" width="108"><tbody><tr><td bgcolor="#000000"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#ffffff"><td height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#cccccc"><td bgcolor="#ffffff" nowrap="nowrap" width="1"><spacer type="block" height="1" width="1"></td><td width="18"><a href="http://www.yandex.ru/" target="_blank"><img src="le9_files/by.gif" title="Яндекс" alt="Яндекс" border="0" height="14" hspace="1" vspace="2" width="18"></a></td><td width="98%"><a href="http://www.yandex.ru/advertising/index.html" target="_blank"><img src="le9_files/bt.gif" title="Реклама на Яндексе" alt="Реклама на Яндексе" align="middle" border="0" height="14" width="51"></a></td><td width="11"><a href="http://narod.yandex.ru/help/20" target="_blank"><img src="le9_files/bh.gif" title="Помощь" alt="Помощь" border="0" height="10" width="11"></a></td><td width="11"><a href="#" onclick="rbu7E79E58B(); return false;"><img src="le9_files/bu.gif" title="Спрятать" alt="Спрятать" border="0" height="10" width="11"></a></td><td bgcolor="#808080" nowrap="nowrap" width="1"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#cccccc"><td width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td bgcolor="#808080" width="100%"><spacer type="block" height="1" width="1"></td><td width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr><tr bgcolor="#cccccc"><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td width="100%"><a href="http://yabs.yandex.ru/count/VddbYzLIm-u40000Zh_-zQm4QnI8hjae1fAlzSW7YgI3vmIGe6e1b96yq4ba1fCkYwEfMnv2UWK0" target="_blank" title="Яндекс.Деньги"><img src="le9_files/VddbYzUnglK40000Zh_-zQm4QnI8hjae1fAlzSW7YgI3vmIGe6e1b96yq4ba.gif" alt="Яндекс.Деньги" border="0" height="100" width="100"></a></td><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr><tr><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td bgcolor="#ffffff" height="1"><spacer type="block" height="1" width="1"></td><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr></tbody></table></td></tr><tr bgcolor="#cccccc"><td height="1" nowrap="nowrap"><table align="left" border="0" cellpadding="0" cellspacing="0" width="1"><tbody><tr><td bgcolor="#ffffff" height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table><table align="right" border="0" cellpadding="0" cellspacing="0" width="1"><tbody><tr><td bgcolor="#808080" height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr><tr bgcolor="#808080"><td height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr></tbody></table></div>
<div style="position: absolute; left: 1149px; top: 0pt; visibility: visible; z-index: 999;" id="bt"><table border="0" cellpadding="1" cellspacing="0" width="108"><tbody><tr><td bgcolor="#000000"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#ffffff"><td height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#cccccc"><td bgcolor="#ffffff" nowrap="nowrap" width="1"><spacer type="block" height="1" width="1"></td><td width="18"><a href="http://www.yandex.ru/" target="_blank"><img src="le9_files/by.gif" title="Яндекс" alt="Яндекс" border="0" height="14" hspace="1" vspace="2" width="18"></a></td><td width="98%"><a href="http://www.yandex.ru/advertising/index.html" target="_blank"><img src="le9_files/bt.gif" title="Реклама на Яндексе" alt="Реклама на Яндексе" align="middle" border="0" height="14" width="51"></a></td><td width="11"><a href="http://narod.yandex.ru/help/20" target="_blank"><img src="le9_files/bh.gif" title="Помощь" alt="Помощь" border="0" height="10" width="11"></a></td><td width="11"><a href="#" onclick="rbd7E79E58B(); return false;"><img src="le9_files/bd.gif" title="Показать" alt="Показать" border="0" height="10" width="11"></a></td><td width="11"><a href="#" onclick="clb7E79E58B();return false;"><img src="le9_files/bc.gif" title="Закрыть" alt="Закрыть" border="0" height="10" width="11"></a></td><td bgcolor="#808080" nowrap="nowrap" width="1"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr bgcolor="#cccccc"><td width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td bgcolor="#808080" width="100%"><spacer type="block" height="1" width="1"></td><td width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr><tr bgcolor="#cccccc"><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td width="100%"><a href="http://yabs.yandex.ru/count/VddbYzLIm-u40000Zh_-zQm4QnI8hjae1fAlzSW7YgI3vmIGe6e1b96yq4ba1fCkYwEfMnv2UWK0" target="_blank"><font color="#000000" size="-2">Яндекс.Деньги</font></a></td><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr><tr><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td><td bgcolor="#ffffff" height="1"><spacer type="block" height="1" width="1"></td><td background="le9_files/bb.gif" width="3"><img src="le9_files/bb.gif" height="1" width="3"></td></tr></tbody></table></td></tr><tr bgcolor="#cccccc"><td height="1" nowrap="nowrap"><table align="left" border="0" cellpadding="0" cellspacing="0" width="1"><tbody><tr><td bgcolor="#ffffff" height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table><table align="right" border="0" cellpadding="0" cellspacing="0" width="1"><tbody><tr><td bgcolor="#808080" height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr><tr bgcolor="#808080"><td height="1" nowrap="nowrap"><spacer type="block" height="1" width="1"></td></tr></tbody></table></td></tr></tbody></table></div>

<!-- mailto:spm111@yandex.ru -->
</body></html>