<html>
<title>Методические указания</title>
<head><H2 ALIGN=CENTER>Методические указания к работе №1</H2></head>

<body BGCOLOR="#CFFFFF" TEXT="#000000" LINK="191970#">

<P>Целью данной лабораторной работы является приобретение и закрепление навыков написания программ на ассемблере.
В ходе работы  студенты должны ознакомиться с правилами ввода ассемблерных команд, 
с механизмом отладки программ в среде Builder 5.0 и изучить основные способы адресации в ассемблере.</P>
<H3>Теоретический материал</H3>
<H4><I>Формироание физического адреса</I></H4>
<P> Вначале определим фундаментальные понятия сегмента и сегментации</P>
Сегментация - механизм адресации, обеспечивающий существование нескольких независимых адресных пространств как в пределах одной задачи, так и в системе в целом
для защиты задач от взаимного влияния. В основе механизма лежит понятие сегмента, который представляет собой независимый, поддерживаемый на аппаратном уровне
блок памяти.
<P>Каждая программа в общем случае может состоять из любого количества сегментов, но непосредственный доступ она имеет только к трём основным сегментам:
кода, данных и стека.Программа никогда не знает, по каким физическим адресам будут размещены её сегменты.Этим занимается операционная система.
 В реальном режиме эти адреса помещаются в сегментные регистры.
Внутри сегмента программа обращается к адресам относительно начала сегмента линейно,то есть начиная с 0 и заканчивая адресом, равным размеру сегмента.Этот относительный
адрес, или смещение, который микропроцессор использует для доступа к данным внутри сегмента, называется эффективным. </P>
<P> В реальном режиме механизм адресации физической памяти имеет следующие характеристики</P>
<LI>диапазон изменения физического адреса от 0 до 1 Мбайт. Эта величина определяется тем, что шина адреса i8086 имела 21 линий;
<LI>максимальный размер сегмента 64 Кбайт. Это объясняется 16-разрядной архитектурой i8086.
<LI>для обращения к конкретному физическому адресу оперативной памяти необходимо определить адрес начала сегмента и смещение внутри сегмента.
Но сегментная составляющая адреса (или база сегмента) представляет собой всего лишь 16-битное значение, помещённое в один из сегментных регистров.
Получается, что адрес начала сегмента может быть только в диапазоне 0-64 Кбайт от начала оперативной памяти. как адресовать остальную часть  вплоть до 1 Мбайта, с учётом того, что размер самого
сегмента не превышает 64 Кбайт? дело в том, что в сегментном регистре содержатся только старшие 16 бит физического адреса начала сегмента. недостающие младшие четыре бита 20-битного адреса 
получаются сдвигом значения в сегментном регистре лево на 4 разряда. Эта операция сдвига выполняется аппаратно. 
Получившееся 20-битное значение и является настоящим физическим адресом, 
соответствующим началу сегмента. Что касается второго компонента, участвующего в образовании физического адреса,- смещения,-то оно представляет собой 16-битное значение. Оно может 
содержаться явно в команде или косвенно в одном из регистров. В микропроцессоре эти две составляющие складываются аппаратно, в результате чего получается физический адрес памяти размерностью 20 бит.
<H4><I>Методы адресации</I></H4>
<P>Большинство команд процессора вызываются с аргументами, которые в ассемблере принято называть операндами.
 Например, команда сложения содержимого регистра с числом требует задания двух операндов - содержимого регистра и числа. 
Далее рассмотрены все существующие способы задания адреса хранения операндов - способы адресации.</P> 
<P ALIGN=LEFT><B>1. Непосредственная адресация</B></P>
Некоторые команды позволяют указывать один из операндов непосредственно 
в тексте программы. Например: команда
<P ALIGN=CENTER><I>MOV AX,2</I></P>
помещает в регистр АХ число 2.
<P ALIGN=LEFT><B>2. Регистровая адресация</B></P>
Операнды могут располагаться в любых регистрах общего назначения и сегментных регистрах. В тексте программы указывается название соответствующего регистра. Например: команда, копирующая в регистр АХ содержимое регистра ВХ, записывается как:
<P ALIGN=CENTER><I>MOV AX,BX.</I></P>
<P ALIGN=LEFT><B>3. Прямая адресация</B></P>
Если у операнда, располагающегося в памяти, известен адрес, то его можно использовать. Если операнд - слово, находящееся в сегменте на который указывает ES, со смещением от начала сегмента 0001, то команда
<P ALIGN=CENTER><I>MOV AX,ES:0001</I></P>
<P>поместит  это слово в регистр АХ.
Обычно при прямой адресации в качестве операнда выступает метка.</P>

<IMG SRC="Pic/1.bmp" ALT="Картинка">

<P>Команда заставляет микропроцессор загрузить регистр АХ значением ячейки памяти, по адресу связанному с меткой mydata.</P>
<P ALIGN=LEFT><B>4. Косвенная базовая адресация</B></P>
При косвенной регистровой адресации вместо метки, указывающей адрес операнда-источника, используется значение операнда по адресу смещения, запомненного в специальном регистре. В качестве этого регистра обычно служит регистр индекса источника (SI), регистр индекса приёмника (DI), регистр базы (BX), а также регистр указателя базы (BP).       
<P ALIGN=CENTER><I>mov AX,[BX]</I></P>
<IMG SRC="Pic/2.bmp" ALT="Картинка">
<P>В этом примере регистр ВХ должен содержать адрес смещения MYDATA. Адрес смещения может быть загружен оператором  OFFSET:</P>
<P ALIGN=CENTER><I>MOV BX, OFFSET mydata</I><P>
<P ALIGN=CENTER>или командой LEA</P>
<P ALIGN=CENTER><I>LEA BX,mydata</I></P>.
Косвенная регистровая адресация может для ссылок на данные, расположенные в форме таблицы. Этот режим предоставляет пользователю доступ к отдельным значениям увеличением содержимого регистра базы и выборки ячейки памяти вместо вызова адреса из памяти и выборки операнда-источника.

<P ALIGN=LEFT><B>5.Косвенная базовая адресация со смещением</B></P>
Исполнительный адрес операнда в случае относительной адресации получается суммированием смещения и значения регистра базы относительно выбранного сегмента. Смещение может быть 8- или16-разрядным числом для 16-разрядных команд и 8- или 32-разрядным числом для 32-разрядных команд. В режиме относительной адресации обычно выполняется доступ к комплексным структурам данных, таких как списки.
 Регистр базы указывает на базу структуры и на частичное поле, выбранное смещением:
<P ALIGN=CENTER><I>LEA EBX, mydata; загрузка адреса базы mydata</I></P>
Изменяя смещение, можно осуществить доступ к различным полям в списке, как показано далее:
<P ALIGN=CENTER><I>MOV EBX, [EBX+4]</I></P>
Изменяя значение регистра базы, можно осуществлять доступ к одним и тем же полям в разных структурах.</P>
<P ALIGN=LEFT><B>6.Косвенная индексная адресация со смещением</B></P>
Этот метод идентичен предыдущему, однако с его помощью можно прочитать элемент массива слов, двойных слов или учетверённых
слов, просто поместив номер элемента в регистр(масштабирование):
<P ALIGN=CENTER><I>MOV AX, [ESI*2]+2</I></P>
Множитель, который равен 1,2,4 или 8, соответствует размеру элемента массива- байту, слову, двойному слову или 
учетверённому слову. Из регистров в этом случае адресации можно использовать только EAX,EBX,ECX,EDX,ESI,EDI,EBP,ESP, но не SI,DI,BP или SP.
<P ALIGN=LEFT><B>7.Косвенная базовая индексная адресация </B></P>
<P>В этом методе адресации смещение операнда в памяти вычисляется как сумма чисел, содержащихся в двух регистрах, 
и смещения, если оно указано. Все перечисленные ниже команды представляют собой разные формы записи
одного и того же действия:</P>
<P ALIGN=CENTER><I>MOV AX,[BX+SI+2]</I></P>
<P ALIGN=CENTER><I>MOV AX,[BX][SI]+2</I></P>
<P ALIGN=CENTER><I>MOV AX,[BX+2][SI]</I></P>
<P ALIGN=CENTER><I>MOV AX,[BX][SI+2]</I></P>
<P ALIGN=CENTER><I>MOV AX,2[BX][SI]</I></P>
 В регистр АХ помещается  слово из ячейки памяти со смещением, равным сумме чисел, содержащихся в BX,SI,
и числа 2. Из 16-битных регистров так можно складывать только BX+SI,BX+DI,BP+SI и  BP+DI, а из 32-битных-
все восемь РОНов. Как и для прямой адресации, вместо непосредственного указания числа разрешено использовать
имя переменной, заданной одной одной из директив определения данных. Таким образом можно считать , например,
 число из двумерного массива: если задана таблица 10 на 10 байт, 2-смещение её от начала сегмента данных, BX=20, а SI=7,
 то приведённые команды прочитают слово, состоящее из седьмого и восьмого байтов третьей строки.Если таблица состоит
 не из одиночных байтов, а из слов или двойных слов, удобнее использовать наиболее полную форму - адресацию по базе с индексированием
 и масштабирование. 
<P ALIGN=LEFT><B>8.косвенная базовая индексная адресация с масштабированием и смещением</B></P>
<P>Это самая полная схема адресации, которая включает все случаи, рассмотренные раннее как частные.Полный адрес
операнда можно записать как выражение на рисунке</P>

<IMG SRC="Pic/3.bmp" ALT="Картинка">

<P>Смещение может быть байтом или двойным словом. если ESP или EBP используются в роли базового регистра, селектор сегмента операнда берётся по 
умолчанию из регистра SS, во всех остальных случаях-из DS.</P>
<P> Все рассмотренные методы адресации относятся к реальному режиму работы процессора.Адресация в защищённом режиме имеет свои особенности.</P>

<H3>Порядок выполнения работы</H3>

1. Перед тем как приступить к выполнению работы студентам предлагается ознакомиться с материалом, содержащимся в справочной системе лабораторного комплекса, а именно с пунктами: "Программная модель процессора" ис материалом, содержащимся в методических указаниях.
<P>2. Запустить демонстрационный пример к работе №1и ознакомиться с действиями, выполняемыми программой.
<P>3. В среде Builder 5.0 открыть проект  AsmLab1, который находиться в папке Пример. Ознакомиться с исходным текстом программы (файл Unit1.cpp), обратить внимание на синтаксис при  оформлении  ассемблерных вставок.
<P>4. В исходном тексте поставить метки (левой кнопкой мыши) перед функцией, использующей ассемблерные вставки.
<P>5. Запустить программу на компиляцию.
<P>6. Выполнить функцию с меткой.
<P>7. В пунктах меню выбрать View, CPU, при этом откроется окно CPU.
<P>8. Выполнить выбранную функцию по шагам (клавиша F8). Обратить внимание на содержимое регистров esi и eax и сопоставить его с тем, что задано в программе.
<P>9.Получить у преподавателя номер варианта.
<P>10. Выполнить задание, взяв за исходный проект, предложенный в примере. Все команды ассемблера можно найти в справочной системе лабораторного комплекса в пункте "Cистема команд".

<H3>Варианты заданий</H3>

<P><I>1вариант.</I> Используя метод косвенной базовой адресации со смещением заменить второй  элемент массива 2 на нулевой элемент массива 1.
<P><I>2вариант.</I>Используя метод косвенной индексной адресации со смещением заменить второй  элемент массива 2 на шестой элемент массива 1.
<P><I>3вариант.</I> Используя метод косвенной базовой индексной адресации  заменить шестой  элемент массива 2 на нулевой элемент массива 1.
<P><I>4вариант.</I> Используя метод косвенной базовой адресации со смещением заменить третий  элемент массива 2 на четвёртый элемент массива 1.
<P><I>5вариант.</I> Используя метод косвенной индексной адресации со смещением заменить второй  элемент массива 2 на шестой элемент массива 1.
<P><I>6вариант.</I> Используя метод косвенной базовой индексной адресации  заменить пятый  элемент массива 2 на третий элемент массива 1.
<P><I>7вариант. </I>Используя метод косвенной базовой адресации со смещением заменить третий  элемент массива 2 на второй элемент массива 1.
<P><I>8вариант. </I>Используя метод косвенной индексной адресации со смещением заменить четвёртый  элемент массива 2 на пятый элемент массива 1.
<P><I>9вариант. </I>Используя метод косвенной базовой индексной адресации  заменить шестой  элемент массива 2 на четвёртый элемент массива 1.
<P><I>10вариант.</I>Используя метод косвенной базовой адресации со смещением заменить шестой  элемент массива 2 на пятый элемент массива 1.

</body>
</html>