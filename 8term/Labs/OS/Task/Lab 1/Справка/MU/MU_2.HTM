<html>
<title>Методические указания</title>
<head><H2 ALIGN=CENTER>Методические указания к работе №2</H2></head>

<body BGCOLOR="#FF0FFF" TEXT="#000000" LINK="#FF0000" ALINK="A52A2A">

<H3>Теоретическая часть</H3>
<H4><I>Инструментальные средства и методы создания программ.</I></H4>
<P>Для работы с ассемблером, прежде всего, потребуется сам ассемблер. Ассемблер - это программа, которая переводит текст с языка, понятного человеку, в язык, понятный процессору. Вместе с ассемблером должна быть ещё одна программа - компоновщик(linker), которая и создаёт исполнимые файлы из одного или нескольких объектных модулей, полученных после запуска ассемблера. Кроме этого для разных целей могут потребоваться дополнительные вспомогательные программы - компиляторы ресурсов. Расширители DOS  и т.д. (таблица 1).</P>
<P>Трудно говорить о том, продукция какой из трёх компаний (Microsoft, Borland или Watcom) однозначно лучше. С точки зрения удобства компиляции TASM лучше подходит для создания 16-битных программ для DOS, MASM -  для Windows. С точки зрения удобства программирования развитость языковых средств растёт в ряду WASM - MASM - TASM.</P>
<TABLE BORDER=1>
<CAPTION>Таблица 1 - Ассемблеры и сопутствующие программы</CAPTION>

<TR><TD>Microsoft</TD><TD>	Borland</TD><TD>	Watcom</TD></TR>
<TR><TD>DOS,16 бит</TD><TD>masm или ml,link (16 бит)</TD><TD>tasm, tlink</TD><TD>wasm,wlink</TD></TR>
<TR><TD>DOS32 бита</TD><TD>masm или ml,link (32 бита) и dosxlink (16 бит) и dos32</TD><TD>tasm,tlink,wdosx или dos32</TD><TD>wasm,wlink,Dos4gw,pmodew,zrdx или wdosx</TD></TR>
<TR><TD>WindowsEXE</TD><TD>masm386 или ml tlink (32 бита)rc</TD><TD>tasm,tlink32,brcc32</TD><TD>wasm,wlink,wrc</TD></TR>
<TR><TD>WindowsDLL</TD><TD>masm386 или ml tlink (32 бита)</TD><TD>tasm,tlink32,implib</TD><TD>	wasm,wlink,wlib  </TD></TR>
</TABLE> 
<P>Во всех программах встречаются ошибки. Если пользователь хочет написать свою программу, то ему рано или поздно  обязательно понадобиться отладчик. Кроме поиска ошибок отладчики иногда применяют, чтобы исследовать работу существующих программ. Отладчики распространяются вместе с соответствующими ассемблерами, - Codeview (MS), Turbo Debugger (Borland) и Watcom Debugger (Watcom).</P>
<P>Традиционно у существующих реализаций ассемблера нет интегрированной среды, подобной интегрированным средам Turbo Pascal, Turbo C или Visual C++.</P>
<P>На рисунке 1 приведена общая схема процесса разработки программ на ассемблере. На первом шаге, когда вводится код программы, можно использовать любой текстовый редактор. Основным требованием к нему является то, чтобы он не вставлял посторонних символов (спецсимволы редактирования). Файл должен иметь расширение .asm.</P>
<IMG SRC="Pic/7.bmp" ALT="Картинка">

<P ALIGN=CENTER>Рисунок 1 - Процесс создания программы на ассемблере</P>

<P>Итак, исходный текст программы на ассемблере подготовлен и записан на диск. Следующий шаг - трансляция программы. На этом шаге формируется объектный модуль, который включает в себя представление исходной программы в машинных кодах и некоторую другую информацию, необходимую для отладки и компоновки его с другими модулями. </P>
<P>После устранения ошибок, которые выдаст транслятор, и получения объектного модуля приступают к созданию загрузочного модуля, то есть к компоновке программы. Главная цель этого шага - преобразование кода и данных в объектных файлах в их перемещаемое выполняемое отображение. Процесс создания исполняемого модуля разделяют на два шага - трансляцию и компоновку, для того, чтобы можно было объединять вместе несколько модулей. Формат объектного модуля позволяет, при определённых условиях, объединить несколько отдельно оттранслированных исходных модулей в один модуль. При этом в функции компоновщика входит разрешение внешних ссылок в этих модулях.</P>
<P>Специфика программ на ассемблере состоит в том, что они интенсивно работают с аппаратными ресурсами компьютера. Это обстоятельство заставляет программиста постоянно отслеживать содержимое определённых регистров и областей памяти. Именно на этом шаге и используется специальный тип программного обеспечения - отладчик, о котором упоминалось выше. Рассмотрим основные моменты работы с отладчиком Turbo Debugger (TD). Основная информация о нём в той или иной степени относится и другим отладчикам.  Этот отладчик представляет собой оконную среду отладки программ на уровне исходного текста языка.</P>
<P>Этот отладчик представляет собой оконную среду отладки программ на уровне исходного текста языка. Он позволяет решить две главные задачи: определить место логической ошибки и определить причину логической ошибки. Перечислим некоторые возможности TD:
<LI>выполнение трассировки программы в прямом направлении, то есть последовательное исполнение программы, при котором за один шаг выполняется одна машинная инструкция;· выполнение трассировки в обратном направлении, то есть выполнение программы по одной команде, но в обратном направлении;
<LI>просмотр и изменение состояния аппаратных ресурсов микропроцессора во время покомандного выполнения программы.</P>
<P>Это позволяет определить место и источник ошибок в программе. TD не позволяет вносит исправления в исходный текст программы. После определения причины ошибочной ситуации можно внести исправления прямо в машинный код и запустить программу на выполнение. После завершения работы отладчика эти изменения не будут сохранены, и их надо внести повторно, но уже в исходный текст, и повторно создать загрузочный модуль.</P>
<P>Запустить программу на выполнение в отладчике можно в одном из четырёх режимов:
<LI> режим безусловного выполнения;
<LI> выполнение по шагам;
<LI>выполнение до текущего положения курсора;
<LI>выполнение с установкой точек прерывания;</P>
<P>Режим безусловного выполнения целесообразно применять, когда требуется посмотреть на общее поведение программы.</P>
<P>Выполнение по шагам применяется для детального изучения работы программы. В этом режиме можно выполнять программу по командам, при этом можно наблюдать результат исполнения каждой программы.</P>
<P>Выполнение до текущего положения курсора позволяет выполнить программу по шагам, начиная с произвольного места программы. Этот режим целесообразно применять в том случае, если вас интересует только правильность функционирования некоторого участка программы.</P>
<P>Выполнение с установкой точек прерывания позволяет выполнить программу с остановкой её в строго определённых точках прерывания, которые устанавливаются в программе перед её выполнением.</P>
<H4><I>Файловая и дисковая системы</I></H4>
<P>В машинах типа IBM PC предусмотрены два уровня обращения к магнитным дискам. При работе на нижнем уровне пользователь 
с помощью прерывания BIOS INT 13h обращается непосредственно к программам управления диска.
 Типичными операциями этого уровня являются запись или чтение сектора,
 позиционирование головок, форматирование дорожки. Требуемая информация отыскивается не по имени файла, 
а по номерам поверхности, цилиндра и сектора.</P>
<P>Верхний уровень реализуется с помощью прерывания DOS INT 21h,
 поддерживающего, наряду с прочими, также и функции обслуживания файловой структуры. Программист работает не 
с программами управления физическим диском, а с файловой системой, получая возможность оперировать такими понятиями, как логический диск, каталог, файл.</P>
<P>Для удобства работы с большим количеством разнородных файлов в DOS используется древовидная структура каталогов. Каталог содержит перечень 
всех подкаталогов следующего уровня и файлов, входящих в данный каталог. Каждому подкаталогу или файлу отводиться одна запись размером 32 байт, 
в которую DOS заносит информацию о файле: имя, начальный адрес на диске (номер кластера), 
дата и время создания, длина в байтах, а также набор характеристик  файла, 
называемых его атрибутами. Кроме записи, 
относящихся к нижележащим каталогам и файлам, 
каждый каталог имеет ещё две записи: о себе самом и о родительском каталоге. 
Формат записи каталога приведён в таблице 2.
<TABLE BORDER=1>
<CAPTION>Таблица 2-Формат записи каталога
</CAPTION>

<TR><TD>Смещение</TD><TD>Число байтов</TD><TD>Содержимое</TD></TR>
<TR><TD>00h</TD><TD>8</TD><TD>Имя файла в кодах ASCII</TD></TR>
<TR><TD>08h</TD><TD>3</TD><TD>Расширение имени файла в кодах ASCII</TD></TR>
<TR><TD>0Bh</TD><TD>1</TD><TD>Байт атрибутов файла</TD></TR>
<TR><TD>0Ch</TD><TD>10</TD><TD>Зарезервировано</TD></TR>
<TR><TD>16h</TD><TD>2</TD><TD>Время создания или последней модификации</TD></TR>
<TR><TD>18h</TD><TD>2</TD><TD>Дата создания или последней модификации</TD></TR>
<TR><TD>1Ah</TD><TD>2</TD><TD>Номер кластера, с которого начинается файл</TD></TR> 
<TR><TD>1Ch</TD><TD>4</TD><TD>Фактическая длина файла в байтах</TD></TR>
</TABLE > </P>
<P>Атрибуты файла хранятся в специально отведённом для них байте атрибутов и могут иметь значения, приведённые в таблице 3.
<TABLE BORDER=1>
<CAPTION>Таблица 3 - Атрибуты файла</CAPTION>
<TR><TD>Атрибут</TD><TD>	Назначение</TD></TR>
<TR><TD>01h</TD><TD>Только для чтения. Модификация или удаление запрещено.</TD></TR>
<TR><TD>02h</TD><TD>Скрытый файл</TD></TR>
<TR><TD>04h</TD><TD>Системный файл</TD></TR>
<TR><TD>08h</TD><TD>Запись о файле представляет собой метку тома. Такая запись может существовать только в корневом каталоге.</TD></TR>
<TR><TD>10h</TD><TD>Файл представляет собой каталог.</TD></TR>
<TR><TD>20h</TD><TD>Файл после создания или модификации не был архивирован</TD></TR>
</TABLE > </P>
<P>Время и дата создания файла помещаются в запись каталога после окончания работы программы с данным файлом и его закрытия.</P>
<P>Номер кластера, с которого начинается файл, позволяет найти на диске начало файла; информация о его последующих кластерах находиться в таблице размещения файлов (FAT).</P>
<P>В последних четырёх байтах записи каталога хранится длина файла в байтах. Если длина измениться, то DOS изменит значение данного поля. </P>
<P>При создании нового файла DOS  сама отыскивает на диске свободное место и назначает его новому файлу, создавая и заполняя соответствующую этому файлу запись в каталоге. Хотя минимальной порцией информации, передаваемой контроллером диска в процессе записи или чтения файла, является сектор (512 байтов), файловая система назначает место на диске целыми кластерами. Размер кластера на гибком диске составляет обычно два сектора; на жёстком диске в кластер могут входить 4-8 секторов. Таким образом, минимальный физический размер файла, даже если данные в нем занимают лишь несколько байтов, составляет один кластер. Однако в записи каталога указывается не физическая, а логическая длина файла. </P>
<P>Методика работы с файлами существенно определяется тем фактом, что каждый файл может занимать на диске несколько несмежных областей, т.е. быть разрывным. Такая система выделения дискового пространства позволяет в процессе работы с файлом многократно дописывать в него новые данные и снимает проблемы с фрагментацией диска, поскольку даже самые маленькие фрагменты на диске могут быть использованы для размещения файлов.</P>
<P>Существует два способа выполнения операций с файлами: с использованием  блоков  управления файлами (FCB) и дескрипторов файлов (handle).</P>
<P>Использование FCB было характерно для первых версий  DOS. FCB- структуры и соответствующие функции DOS не поддерживают древовидных каталогов и могут работать только с файлами из текущего каталога текущего диска.</P>
<P>Другой способ операций с файлами предполагает использование дескрипторов (файловых индексов, файловых описателей), которые можно рассматривать, как  номера открытых файлов. </P>
<P>Процедура обращения к файлу в общем случае распадается на следующие операции:
<LI>создание файла с заданным именем в указанном каталоге или открытие существующего файла;
<LI>запись в файл или чтение из файла;
<LI> закрытие файла.
<P>Открывая файл, DOS назначает ему очередной свободный элемент специальной системной таблицы, называемой таблицей открытых файлов (SFT) и располагаемой в оперативной памяти среди системных областей данных. </P>
<P>Найдя в системе каталогов диска запись об открываемом файле, DOS записывает в выделенный ему элемент  SFT основные характеристики файла. Часть информации переписывается в SFT  из записи каталога, часть DOS  поставляет сама. Важным элементом блока описания файла является двухсловная ячейка, в которой храниться указатель файла - номер байта относительно начала файла, с которого начнётся очередная операция записи или чтения.</P>
<P>Наличие указателя позволяет организовать прямой доступ к файлу, т.е. чтение или запись, начиная от любого места файла. Ссылку на номер выделенного файла DOS возвращает в программу в виде дескриптора. </P>
<P>Обращение к открытому файлу осуществляется по присвоенному ему дескриптору; неоткрытый файл не имеет дескриптора, и система не может с ним работать. По мере выполнения операций с открытым файлом DOS модифицирует информацию в блоке SFT; содержимое SFT всегда отражает текущее состояние файла.</P>
<P>В процессе закрытия файла происходит сброс на диск буферов DOS, модификация записи каталога и освобождение блока описания файла в SFT вместе с закреплённым за ним дескриптором. </P>
<P>При работе с дисками на уровне DOS мы обращаемся к файлам по их именам. От пользователя остаётся скрытым местоположение файлов на диске, и он не может обратиться к системным областям диска - загрузочным записям,  таблицам размещения файлов и каталогам. Для работы с этими областями, а также с конкретными секторами или кластерами файлов используются либо функции драйвера BIOS (INT 13h), либо два специальных прерывания DOS - INT 25 и INT 26, осуществляющие доступ не к файлам, а к секторам диска. </P>
<P>Для работы с дисками и файлами в ассемблере используется группа дисковых функций DOS. В эту группу входят прерывания, предназначенные для выполнения основных функций операционной системы, в том числе для выполнения операций с дисками, каталогами и файлами. Дисковые функции обладают достаточной полнотой и универсальностью для решения любых задач в реальном режиме DOS.</P>
 Ниже описаны функции DOS,  которые выполняют основные операции над логическими дисками, каталогами и файлами.
 При описании используются следующие термины:
<LI> cтрока ASCIIZ - текстовая строка в ASCII-коде, которая завершается нулевым значением;
<LI>дескриптор файла - уникальный номер, который операционная система присваивает создаваемому
 или открываемому файлу в качестве идентификатора (чтобы потом обращаться к файлу по этому номеру - вплоть до его закрытия).
<P>Для вызова данных функций необходимо вызывать прерывание 21h.</P>

<P><B>Функция 19h. Определить номер текущего дисковода.</B></P>
Функция определяет номер текущего дисковода, который в данный момент считается текущим, то есть используется по умолчанию.
Перед вызовом прерывания необходимо записать в регистр AH значение 19h/
После завершения операции функция возвращает в регистр AL код логического диска (0 - А, 1 - В, и т.д.).
<P><B>Функция 36h. Определить объём свободного места на диске.</P></B>
Функция определяет  объём свободного места на заданном логическом диске.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI> в AH - значение 36h;
<LI>в AL - код логического диска (0 - А, 1 - В, и т.д.).
В случае ошибки в регистре AX будет возвращён код 0FFFFh (недопустимый код логического диска).
	В случае успешного завершения операции функция возвращает:
<LI>в AX - число секторов в кластере;
<LI>в BX - число свободных кластеров;
<LI>в CX - число байтов в секторе;
<LI>в DX - полное число кластеров на диске.
Объём свободного пространства определяется произведением содержимого регистров AX,BX, и CX, а полный объём диска в байтах - произведением AX,CX, и DX.
<P><B>Функция 39h. Создать каталог.</P></B>
Функция создаёт в текущем дереве каталогов новый подкаталог.
	Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 39h;
<LI>в DS:DX - указатель на полную спецификацию каталога в виде строки в формате ASCIIZ (должны существовать все каталоги на указанном пути, кроме последнего; вызов функции завершается ошибкой, если родительский каталог заполнен и является корневым.).
	Возможные коды ошибки: 03h, 05h.
<P><B>Функция 3Ah. Удалить каталог.</B><P>
Функция удаляет указанный каталог.
	Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 3Ah;
<LI>в DS:DX - указатель на полную спецификацию каталога в виде строки в формате ASCIIZ.
Возможные коды ошибки: 03h, 05h, 06h, 10h.
ПРИМЕЧАНИЕ. Каталог должен быть пустым, иначе выдаётся сообщение об ошибке.

<P><B>Функция 5Bh. Создать файл.</P></B>
Функция создаёт файл для записи. Завершается ошибкой, если файл с заданным именем уже существует.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 5Bh;
<LI>в CX - атрибуты создаваемого файла;
<LI>в DS:DX - указатель на имя файла в формате ASCIIZ.
В случае успешного завершения  операции функция возвращает в регистре AX дескриптор файла.
Возможные коды ошибки: 03h, 04h, 05h, 50h.
<TABLE BORDER=1>
<CAPTION>Таблица 4 - Формат слова атрибутов файла</CAPTION>

<TR><TD>Номер разряда</TD><TD> Описание</TD></TR>
<TR><TD>0</TD><TD>Только для чтения</TD></TR>
<TR><TD>1</TD><TD>Скрытый</TD></TR>
<TR><TD>2</TD><TD>Системный</TD></TR>
<TR><TD>3</TD><TD>Метка тома (может быть установлен только при считывании атрибутов; при создании файла или изменении атрибутов значение - 0)</TD></TR>
<TR><TD>4</TD><TD>Каталог (разряд может быть установлен только считывании атрибутов; при создании файла или изменении атрибутов значение - 0)</TD></TR>
<TR><TD>5</TD><TD>Признак архивации</TD></TR>
<TR><TD>6-15</TD><TD>Зарезервированы, должны быть равны 0</TD></TR>
</TABLE >
<P><B>Функция 41h. Удалить файл.</P></B>
Функция удаляет указанный файл. 
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 41h;
<LI>в DS:DX - указатель на имя файла в формате ASCIIZ.
В случае успешного завершения  операции функция возвращает в регистре AX дескриптор файла.
Возможные коды ошибки: 02h, 03h, 05h.
Функция 3Еh. Закрыть файл.
Функция сбрасывает на диск содержимое всех буферов, обновляет информацию в каталоге, а затем освобождает дескриптор файла.
 Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 3Еh;
<LI>в ВX - дескриптор файла.
Возможный код ошибки: 06h.

<P><B>Функция 3Dh. Открыть существующий файл.</P></B>
Функция открывает файл для чтения, записи или дозаписи. Указатель при этом устанавливается в начало файла.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 3Dh;
<LI>в AL - режимы доступа;
<LI>в DS:DX - указатель на имя файла в формате ASCIIZ.
Возможные коды ошибки: 01h, 02h, 03h, 04h, 05h, 0Ch.
<TABLE BORDER=1>
<CAPTION>Таблица 5 - Формат байта режимов доступа</CAPTION>

<TR><TD>Номер разряда</TD><TD>Описание</TD></TR>
<TR><TD>0-2</TD><TD>	Режим доступа:
000 - только для чтения;
001 - только для записи;
010 - для чтения и записи;</TD></TR>
<TR><TD>3</TD><TD>Зарезервирован, должен быть равен 0</TD></TR>
<TR><TD>4-6</TD><TD>Режим разделения файлов:
000 - режим совместимости;
001 - другим программам запрещён любой доступ к файлу;
010 - другим программам запрещена запись;
011 - другим программам запрещено чтение;
001 - другим программам разрешён полный доступ к файлу</TD></TR>
 <TR><TD>7</TD><TD>Флаг наследования: 0 - дочерний процесс наследует дескриптор; 1 - не наследует</TD></TR>

<P><B>Функция 3Fh. Чтение информации из  файла.</P></B>
Функция считывает данные из файла в указанный буфер. Считывание начинается с текущей позиции указателя файла.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 3Fh;
<LI>в BX - дескриптор файла;
<LI>в CX - число байтов, подлежащих считыванию;
<LI>в DS:DX - указатель на буфер, в который должна быть занесена считанная информация.
В случае успешного завершения  операции функция возвращает в регистре AX число реально считанных  байт (оно может быть меньше значения, указанного в регистре CX  при вызове функции, если  в процессе считывания достигнут конец файла).
Возможные коды ошибки: 05h, 06h.
<P><B>Функция 40h. Запись информации в  файл.</P></B>
Функция записывает данные из указанного буфера в файл. Запись  начинается с текущей позиции указателя файла.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 40h;
<LI>в BX - дескриптор файла;
<LI>в CX - число байтов, подлежащих записи;
<LI>в DS:DX - указатель на буфер, информация из которого должна быть занесена в файл.
В случае успешного завершения  операции функция возвращает в регистре AX число реально записанных  байт (оно может быть меньше значения, указанного в регистре CX  при вызове функции, если  на диске недостаточно свободного места).
Возможные коды ошибки: 05h, 06h.
<P><B>Функция 43h, подфункция 00h. Получить атрибуты файла.</P></B>
Подфункция определяет атрибуты указанного файла.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AX - значение 4300h;
<LI>в DS:DX - указатель на имя файла в формате ASCIIZ.
В случае успешного завершения  операции функция возвращает в регистре CX дескриптор слово атрибутов файла.
Возможные коды ошибки: 01h, 06h.
<P><B>Функция 43h, подфункция 01h. Изменить атрибуты файла.</P></B>
Подфункция изменяет атрибуты указанного файла.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AX - значение 4301h;
<LI>в CX - новые значения атрибутов;
<LI>в DS:DX - указатель на имя файла в формате ASCIIZ.
В случае успешного завершения  операции функция возвращает в регистре CX дескриптор слово атрибутов файла.
Возможные коды ошибки: 01h, 02h, 03h, 05h.
<P><B>Функция 47h. Определить имя текущего каталога на указанном устройстве .</P></B>
Функция выдаёт имя текущего каталога на указанном логическом диске.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 47h;
<LI>в DL - код логического диска (0 - диск, используемый по умолчанию,1 - А, 2 - В и т.д.).
<LI>в DS:SI - указатель на буфер размером 64 байта, выделенный для записи имени каталога.
В случае ошибки в регистре AX будет возвращён код 0FFFFh (недопустимый код логического диска).
В случае успешного завершения операции функция в буфер будет записан путь от корневого каталога до текущего в виде строки ASCIIZ. Описание пути не включает в себя идентификатор диска и начальный обратный слэш "\".
Возможный код ошибки: 0Fh.
<P><B>Функция 57h, подфункция 00h.Получить время и дату создания файла.</P></B>
Функция считывает время и дату создания файла с заданным дескриптором.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AX - значение 5700h;
<LI>в BX -  дескриптор файла;
В случае успешного завершения операции функция возвращает в регистрах следующие значения:
<LI> в CX - время создания файла:
 биты 0-4 - двухсекундные приращения;
 биты 5-10 - минуты;
 биты 11-15 - часы;
<LI> в DX - дату создания файла:
 биты 0-4 - день:
 биты 5-8 - месяц:
 биты 9-15 - номер года (относительно 1980 года).
Возможные коды ошибки: 01h, 06h.
<P><B>Функция 57h, подфункция 01h. Изменить время и дату создания файла.</P></B>
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AX - значение 5701h;
<LI>в BX -  дескриптор файла;
<LI>в CX - время создания файла:
 биты 0-4 - двухсекундные приращения;
 биты 5-10 - минуты;
 биты 11-15 - часы;
<LI>в DX - дату создания файла:
 биты 0-4 - день:
 биты 5-8 - месяц:
 биты 9-15 - номер года (относительно 1980 года).
Возможные коды ошибки: 01h, 06h.

<P><B>Функция BIOS 08h. Пполучить параметры дисковода.</P></B>
Функция предназначена для определения параметров дисководов.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 08h;
<LI>в DL - номер дисковода (00h-7Fh - гибкий диск, 80h-FFh - жесткий диск).
После завершения функция возвращает в регистр AH состояние дисковой системы.
В случае успешного завершения операции функция возвращает в регистры следующие значения:
<LI>в BL - код типа дисковода;
<LI>в CH - младшие 8 разрядов максимального номера цилиндра;
<LI>в CL - максимальный номер сектора;
<LI>в DH - максимальный номер головки;
<LI>в DL - общее число дисководов в системе;
<LI>ES : DI - указатель на таблицу параметров гибкого диска;
<TABLE BORDER=1>
<CAPTION>
Таблица 6 - Значения кодов типа дисковода</CAPTION>
<TR><TD>Код</TD><TD>Тип дисковода</TD></TR>
<TR><TD>1</TD><TD>5.25", 360 Кбайт, 40 дорожек</TD></TR>
<TR><TD>2</TD><TD>5.25",1.2 Мбайт, 80 дорожек</TD></TR>
<TR><TD>3</TD><TD>3.5, 720 Кбайт, 80 дорожек</TD></TR>
<TR><TD>4</TD><TD>3.5, 1.44 Мбайт,80 дорожек</TD></TR>
</TABLE>
<P><B>Функция BIOS 10h. Проверить готовность жёсткого диска к работе.</P></B>
Функция определяет готовность жёсткого диска к выполнению операций ввода/вывода.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 10h;
<LI>в DL - номер жёсткого диска (80h-FFh - жесткий диск).
После завершения функция возвращает в регистр AH состояние дисковой системы.

<P><B>Функция BIOS 01h. Определить текущее состояние дисковой системы.</P></B>
Функция возвращает код завершения последней операции, выполненной на указанном дисководе.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 01h;
<LI>в DL - номер дисковода (00h-7Fh - гибкий диск, 80h-FFh - жесткий диск).
После завершения функция возвращает в регистр AH состояние дисковой системы.

<P><B>Функция BIOS 02h. Читать сектор.</P></B>
Функция выполняет операцию считывания в заданную область оперативной памяти информации из одного или нескольких секторов диска.
Перед вызовом прерывания необходимо записать в регистры следующие значения:
<LI>в AH - значение 02h;
<LI>в АL - число считываемых секторов;
<LI>в CH - номера цилиндра;
<LI>в CL - номер начального сектора;
<LI>в DH - номер головки;
<LI>в DL - номер дисковода (00h-7Fh - гибкий диск, 80h-FFh - жесткий диск).
<LI>ES : DI - указатель на адрес буфера, в который производиться считывание информации.
После завершения функция возвращает в регистр AH состояние дисковой системы.
В случае успешного завершения операции функция возвращает в регистры следующие значения:
<LI>в АL - число прчитанных секторов;
<LI>в буфере -прочитанная информация.

<P><H3>2 Порядок выполнения работы</H3></P>
<P>1.Ознакомиться с теоретическим материалом, приведённым в методических указаниях.
<P>2.Запустить на выполнение пример и ознакомиться с демонстрационными программами.
<P>3.Получить у преподавателя номер варианта и задание по нему, которое приведено в лабораторном комплексе.
<P>4.Разработать предварительный алгоритм программы.
<P>5.В текстовом редакторе  ввести текст исходной программы.
<P>6.Запустить на выполнение программу TASM.EXE, если есть ошибки, то вернуться к пункту 4.
<P>7.Запустить на выполнение программу TLINK.EXE, если есть ошибки, то вернуться к пункту 4.
<P>8.Запустить на выполнение программу TD.EXE, если есть ошибки, то вернуться к пункту 4.
<P>9. Получить контрольные вопросы.
<P>10.Подготовить ответы на вопрсы.
<P>11.Оформить отчёт.
<P>12.Защитить лабораторную работу.























